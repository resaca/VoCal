/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Text.java
 *
 * Created on Apr 27, 2011, 11:51:29 AM
 */

/**
 *
 * @author Rahana,Anu,Sebin,Pratheesh
 */
 

import java.sql.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;


public class Text extends javax.swing.JFrame {

    /** Creates new form Text */
    public Text(String user) {
        initComponents();
        usr=user;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnProcess = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtText = new javax.swing.JTextArea();
        btnClear = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtOP = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Text");
        setBounds(new java.awt.Rectangle(500, 200, 0, 0));
        setResizable(false);

        btnProcess.setText("Process");
        btnProcess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProcessActionPerformed(evt);
            }
        });

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        txtText.setColumns(20);
        txtText.setRows(5);
        jScrollPane1.setViewportView(txtText);

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        jLabel1.setText("Enter your text here..");

        txtOP.setColumns(20);
        txtOP.setRows(5);
        txtOP.setEnabled(false);
        jScrollPane2.setViewportView(txtOP);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnProcess)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnClear)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCancel))
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane2))
                .addContainerGap(47, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancel)
                    .addComponent(btnClear)
                    .addComponent(btnProcess))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(36, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnProcessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProcessActionPerformed
        try{
            String rtext="";
            txtOP.setEnabled(false);
            text = txtText.getText();
            text=text.toLowerCase();
            arr = text.split(" ");
            for (i = 0; i < arr.length; i++) {
                if (arr[i].contains("'s")) {
                    arr[i] = arr[i].substring(0, (arr[i].length() - 2));
                }
            }
            for (i = 0; i < arr.length; i++) {
                if (arr[i].contains("birth")||arr[i].equals("birthday") || arr[i].equals("birthdays") || arr[i].substring(0, arr[i].length() - 1).equals("birthday") || arr[i].substring(0, arr[i].length() - 1).equals("birthdays")) {
                    if (arr[i].equals("birthdays")|| arr[i].substring(0, arr[i].length() - 1).equals("birthday")) {
                        arr[i] = arr[i].substring(0, arr[i].length() - 1);
                    }
                    if( arr[i].substring(0, arr[i].length() - 1).equals("birthdays"))arr[i] = arr[i].substring(0, arr[i].length() - 2);
                    process("birthday");
                    ko=1;
                    break;
                }
            }
            for (i = 0; i < arr.length; i++) {
                if (arr[i].contains("annivers")||arr[i].equals("anniversary") || arr[i].equals("anniversaries") || arr[i].substring(0, arr[i].length() - 1).equals("anniversary") || arr[i].substring(0, arr[i].length() - 1).equals("anniversaries")) {
                    if (arr[i].equals("anniversaries")|| arr[i].substring(0, arr[i].length() - 1).equals("anniversary")) {
                        arr[i] = arr[i].substring(0, arr[i].length() - 1);
                    }
                    if( arr[i].substring(0, arr[i].length() - 1).equals("anniversaries"))arr[i] = arr[i].substring(0, arr[i].length() - 2);
                    process("anniversary");
                    ko=1;
                    break;
                }
            }
            for (i = 0; i < arr.length; i++) {
                if (arr[i].contains("remind")||arr[i].equals("reminder") || arr[i].equals("reminders") || arr[i].substring(0, arr[i].length() - 1).equals("reminder") || arr[i].substring(0, arr[i].length() - 1).equals("reminders")) {
                    if (arr[i].equals("reminders")|| arr[i].substring(0, arr[i].length() - 1).equals("reminder")) {
                        arr[i] = arr[i].substring(0, arr[i].length() - 1);
                    }
                    if( arr[i].substring(0, arr[i].length() - 1).equals("reminders"))arr[i] = arr[i].substring(0, arr[i].length() - 2);
                    process("reminder");
                    ko=1;
                    break;
                }
            }
            for (i = 0; i < arr.length; i++) {
                if (arr[i].contains("note")||arr[i].equals("notes") || arr[i].equals("note") || arr[i].substring(0, arr[i].length() - 1).equals("note") || arr[i].substring(0, arr[i].length() - 1).equals("notes")) {
                    Manual m=new Manual(usr, dateI, monthI, yearI, dateI, monthI, yearI, 5, 3);
                    m.setVisible(true);
                    this.setVisible(false);
                    ko=1;
                    break;
                }
            }
            for (i = 0; i < arr.length; i++) {
                if (arr[i].contains("meet")||arr[i].equals("meeting") || arr[i].equals("meetings") || arr[i].substring(0, arr[i].length() - 1).equals("meeting") || arr[i].substring(0, arr[i].length() - 1).equals("meetings")) {
                    if (arr[i].equals("meetings")|| arr[i].substring(0, arr[i].length() - 1).equals("meeting")) {
                        arr[i] = arr[i].substring(0, arr[i].length() - 1);
                    }
                    if( arr[i].substring(0, arr[i].length() - 1).equals("meetings"))arr[i] = arr[i].substring(0, arr[i].length() - 2);
                    process("meeting");
                    ko=1;
                    break;
                }
            }
            if(ko==0){
            for(i=0;i<arr.length;i++){
            try {
                if(arr[i].contains("?"))arr[i]=arr[i].substring(0, arr[i].length()-1);
                rs = conn("reminder", arr[i]);
                rs.beforeFirst();
                while (rs.next()) {
                    try {
                        ko=1;
                        txtOP.setEnabled(true);
                        txtOP.setText(rs.getString(1) + "-Reminder " + rs.getString(3) + " on " + rs.getString(4));
                        Speech sp=new Speech();
                        rtext=findText("reminder", rs);
                        sp.speak(rtext);
                    }
                    catch (SQLException ex) {
                        ko=0;
                        Logger.getLogger(Text.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                stmtAnn.close();stmtBdy.close();stmtNot.close();stmtRem.close();stmtMet.close();
            } 
            catch (SQLException ex) {
                Logger.getLogger(Text.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_btnProcessActionPerformed
    if(ko==0)JOptionPane.showMessageDialog(this, "Check your input!!");
            }
    }
        catch(Exception e){
            
        }
}
    String findText(String qr,ResultSet sa){
        String dor="",ss="",fs,nam="",dat="",mon="",yer="",nt="";
        try {
            nam = sa.getString(3);
        } catch (SQLException ex) {
            Logger.getLogger(Manual.class.getName()).log(Level.SEVERE, null, ex);
        }
        if(!qr.contains("note")){
        try {
            dor = sa.getString(4);
        } catch (SQLException ex) {
            Logger.getLogger(Manual.class.getName()).log(Level.SEVERE, null, ex);
        }
        dat=dor.substring(8, 10);
        if(dor.substring(5, 7).equals("01"))mon="january";
        else if(dor.substring(5, 7).equals("02"))mon="february";
        else if(dor.substring(5, 7).equals("03"))mon="march";
        else if(dor.substring(5, 7).equals("04"))mon="april";
        else if(dor.substring(5, 7).equals("05"))mon="may";
        else if(dor.substring(5, 7).equals("06"))mon="june";
        else if(dor.substring(5, 7).equals("07"))mon="july";
        else if(dor.substring(5, 7).equals("08"))mon="august";
        else if(dor.substring(5, 7).equals("09"))mon="september";
        else if(dor.substring(5, 7).equals("10"))mon="october";
        else if(dor.substring(5, 7).equals("11"))mon="november";
        else if(dor.substring(5, 7).equals("12"))mon="december";
        yer=dor.substring(0, 4);
        }
        if(qr.contains("annivers")){
            ss="anniversary of ";
        }
        else if(qr.contains("meet")){
            ss="meeting with ";
        }
        else if(qr.contains("remind")){
            ss="reminder ";
        }
        else if(qr.contains("note")){
            ss="note ";
        }
        else if(qr.contains("birth")){
            ss="birthday of ";
        }
        try {
            if(qr.contains("meeting"))
            nt = sa.getString(10);
            else if(qr.contains("note"))
                nt=sa.getString(4);
            else nt=sa.getString(8);
        } catch (SQLException ex) {
            Logger.getLogger(Manual.class.getName()).log(Level.SEVERE, null, ex);
        }
        if(qr.contains("note"))
            fs=ss.concat(nam.concat(" ".concat(nt)));
        else
        fs=ss.concat(nam.concat(" on ".concat(dat).concat("th ".concat(mon).concat(" ").concat(yer).concat("\n\n\n").concat(nt))));
        return fs;
    }
    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        StoreRetrieve sr= new StoreRetrieve(usr);
        sr.setVisible(true);
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        // TODO add your handling code here:
        txtText.setText("");
        txtOP.setEnabled(false);
        txtOP.setText("");
    }//GEN-LAST:event_btnClearActionPerformed
    
    void process(String s){
        for(i=0;i<arr.length;i++){
        if(arr[i].equals("any")||arr[i].equals("where")||arr[i].equals("when")||arr[i].equals("whose")||arr[i].equals("whom")||arr[i].equals("what")||arr[i].equals("which")||arr[i].contains("?"))
                {
            for(i=0;i<arr.length;i++){
                    if(arr[i].contains("?"))arr[i]=arr[i].substring(0,arr[i].length()-1);
                    }
                    f=1;
                    retrieveNext(s);
                }
        }
    }
    void retrieveNext(String s){
        if(h==0)
        for(i=0;i<arr.length;i++){
        if(arr[i].equals("today"))
                {
                    fg=1;
                    h=1;
                    Manual m=new Manual(usr, dateI, monthI, yearI, dateI, monthI, yearI,5,0);
                    m.setVisible(true);
                    this.setVisible(false);
                }
        }
        if(h==0)
        for(i=0;i<arr.length;i++){
            if(arr[i].equals("this")||arr[i].equals("tomorrow")||arr[i].equals("tomorrow's")||arr[i].equals("yesterday")||arr[i].equals("yesterday's")||arr[i].equals("next")||arr[i].equals("last")){
                fg=1;
                h=calcDate(s);
            }
        }
        if(h==0&&fg==0){
            calcDate(s);
            if(txtOP.getText().isEmpty())JOptionPane.showMessageDialog(this, "Check your input!!");
        }
    }
    int findNext(int c,String s){
        if(s.equals("sunday"))c+=7;
        else if(s.equals("monday"))c+=6;
        else if(s.equals("tuesday"))c+=5;
        else if(s.equals("wednesday"))c+=4;
        else if(s.equals("thursday"))c+=3;
        else if(s.equals("friday"))c+=2;
        else if(s.equals("saturday"))c+=1;
        c%=7;
            switch(c){
                case 0:c=1;break;
                case 1:c=7;break;
                case 2:c=6;break;
                case 3:c=5;break;
                case 4:c=4;break;
                case 5:c=3;break;
                case 6:c=2;break;
            }
            return c;
    }
    int findPrev(int c,String s){
        if(s.equals("sunday"))c+=7;
        else if(s.equals("monday"))c+=6;
        else if(s.equals("tuesday"))c+=5;
        else if(s.equals("wednesday"))c+=4;
        else if(s.equals("thursday"))c+=3;
        else if(s.equals("friday"))c+=2;
        else if(s.equals("saturday"))c+=1;
        c%=7;
            switch(c){
                case 0:c=-7;break;
                case 1:c=-1;break;
                case 2:c=-2;break;
                case 3:c=-3;break;
                case 4:c=-4;break;
                case 5:c=-5;break;
                case 6:c=-6;break;
            }
            return c;
    }
    int calcDate(String s){
        String texts;
        if(h==0&&fg==0){
            for(i=0;i<arr.length;i++){
            try {
                rs = conn(s, arr[i]);
                rs.beforeFirst();
                if(rs.next()){
                    txtOP.setEnabled(true);
                    if(s.equals("meeting"))
                    txtOP.setText(rs.getString(1) + "-Meeting with " + rs.getString(3) + " on " + rs.getString(4)+" from "+rs.getString(5)+" to "+rs.getString(6));
                    else if(s.equals("anniversary"))
                    txtOP.setText(rs.getString(1) + "-Anniversary of " + rs.getString(3) + " on " + rs.getString(4));
                    else if(s.equals("birthday"))
                    txtOP.setText(rs.getString(1) + "-Birthday of " + rs.getString(3) + " on " + rs.getString(4));
                    else if(s.equals("reminder"))
                    txtOP.setText(rs.getString(1) + "-Reminder " + rs.getString(3) + " on " + rs.getString(4));
                    else if(s.equals("note"))
                    txtOP.setText(rs.getString(1) + "-Note " + rs.getString(3) + " " + rs.getString(4));
                }
                Speech sp=new Speech();
                texts=findText(s, rs);
                sp.speak(texts);
                stmtAnn.close();stmtBdy.close();stmtNot.close();stmtRem.close();stmtMet.close();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Check your input!!");
                Logger.getLogger(Text.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return 2;
        }
        else{
        Home hom=new Home();
        C=hom.findC(monthI, yearI);
        C+=dateI;
        C%=7;
        for(i=0;i<arr.length;i++){
        if(arr[i].equals("tomorrow")||arr[i].equals("tomorrows")){
            dateSel=0;
            setDate(1,s);
             }
        else if(arr[i].equals("yesterday")||arr[i].equals("yesterdays")){
               dateSel=0;
               setDate(-1,s);
        }
        else if(arr[i].equals("next")){
                if(arr[i+1].equals("sunday")||arr[i+1].equals("monday")||arr[i+1].equals("tuesday")||arr[i+1].equals("wednesday")||arr[i+1].equals("thursday")||arr[i+1].equals("friday")||arr[i+1].equals("saturday")){
                dateSel=0;
                setDate(findNext(C, arr[i+1]),s);
                }
                else if(arr[i+2].equals("days")){
                    d=dN();
                    dateSel=1;
                    setDate(d-1, s);
                }

                else if(arr[i+1].equals("week")||arr[i+2].contains("weeks")){
                    if(arr[i+2].equals("weeks"))d=dN();
                    else d=1;

                    for(i=0;i<d;i++){
                    dateSel=2;
                    setDate(C=findNext(C,"sunday"),s);
                    dateSel=1;
                    setDate(6,s);
                    }
                }
                else if(arr[i+1].equals("month")||arr[i+2].contains("months")){
                    dateSel=2;
                    dateI=1;
                    if(arr[i+2].equals("months"))d=dN();
                    else d=1;
                    monthI+=d;
                    if(monthI>12){
                        monthI=1;
                        yearI++;
                        }
                    
                    switch(monthI){
                        case 1:case 3:case 5:case 7:case 8:case 10:case 12:
                            setDate(30,s);break;
                            case 2:
                                if((yearI%4==0&&yearI%100!=0)||yearI%400==0)setDate(28,s);
                                else setDate(27,s);
                                break;
                            case 4:case 6:case 9:case 11:setDate(29,s);
                    }
                }
                else if(arr[i+1].equals("year")){
                    dateSel=1;
                    dateI=1;
                    monthI=1;
                    yearI++;
                    if((yearI%4==0&&yearI%100!=0)&&yearI%400==0)setDate(365,s);
                    else setDate(364,s);
                }
               
                


        }
        else if(arr[i].equals("this")){
            if(arr[i+1].equals("week")){
                dateSel=2;
                setDate(C=findPrev(C, "sunday"),s);
                dateSel=1;
                setDate(6,s);
            }

            else if(arr[i+1].equals("sunday")||arr[i+1].equals("monday")||arr[i+1].equals("tuesday")||arr[i+1].equals("wednesday")||arr[i+1].equals("thursday")||arr[i+1].equals("friday")||arr[i+1].equals("saturday")){
                dateSel=0;
                setDate(findPrev(C, arr[i+1]),s);
                }
            else if(arr[i+1].equals("month")){
                    dateSel=1;
                    dateI=1;
                    switch(monthI){
                        case 1:case 3:case 5:case 7:case 8:case 10:case 12:
                            setDate(30,s);break;
                            case 2:
                                if((yearI%4==0&&yearI%100!=0)||yearI%400==0)setDate(28,s);
                                else setDate(27,s);
                                break;
                            case 4:case 6:case 9:case 11:setDate(29,s);
                    }
        }
            else if(arr[i+1].equals("year")){
                    dateSel=1;
                    dateI=1;
                    monthI=1;
                    if((yearI%4==0&&yearI%100!=0)&&yearI%400==0)setDate(365,s);
                    else setDate(364,s);
                }
    }
        else if(arr[i].equals("last")){

                if(arr[i+1].equals("sunday")||arr[i+1].equals("monday")||arr[i+1].equals("tuesday")||arr[i+1].equals("wednesday")||arr[i+1].equals("thursday")||arr[i+1].equals("friday")||arr[i+1].equals("saturday")){
                dateSel=0;
                setDate(findPrev(C, arr[i+1])-7,s);
                }
                else if(arr[i+1].equals("week")){
                    dateSel=2;
                    setDate(C=findPrev(C,"sunday")-7,s);
                    dateSel=1;
                    setDate(6,s);
                }
                else if(arr[i+1].equals("month")){
                    dateSel=1;
                    dateI=1;
                    monthI--;
                    if(monthI<1){
                        monthI=12;
                        yearI--;
                        }
                    switch(monthI){
                        case 1:case 3:case 5:case 7:case 8:case 10:case 12:
                            setDate(30,s);break;
                            case 2:
                                if((yearI%4==0&&yearI%100!=0)||yearI%400==0)setDate(28,s);
                                else setDate(27,s);
                                break;
                            case 4:case 6:case 9:case 11:setDate(29,s);
                    }
                }
                else if(arr[i+1].equals("year")){
                    dateSel=1;
                    dateI=1;
                    monthI=1;
                    yearI--;
                    if((yearI%4==0&&yearI%100!=0)&&yearI%400==0)setDate(365,s);
                    else setDate(364,s);
                }
                for(int k=1;k<=100;k++){
                    //int l=Integer.parseInt(arr[i+1]);
                    if(arr[i+1].equals(Integer.toString(k))){
                        dateSel=3;
                        setDate(1-k,s);
                    }
                }
        }
        }
        return 1;
        }

      }
     int dN(){
         if(arr[i+2].equals("days")||arr[i].equals("months")||arr[i+2].equals("year")||arr[i+2].equals("week"))
                {
                    if(arr[i+1].equals("two"))d=2;
                    else if(arr[i+1].equals("three"))d=3;
                    else if(arr[i+1].equals("four"))d=4;
                    else if(arr[i+1].equals("five"))d=5;
                    else if(arr[i+1].equals("six"))d=6;
                    else
                    {
                        for(int k=1;k<=30;k++){
                        if(arr[i+1].equals(Integer.toString(k))){
                            d=k;
                            break;
                         }
                       }
                    }
                }
         return d;
     }

    ResultSet conn(String s1,String s2){
        try {
            String strUrl = "jdbc:derby:Vo-Cal;user=app;password=app";
            Connection dbConnection = DriverManager.getConnection(strUrl);
            Statement stmt = dbConnection.createStatement();
            stmtAnn = dbConnection.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            stmtBdy = dbConnection.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            stmtRem = dbConnection.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            stmtMet = dbConnection.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            stmtNot = dbConnection.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            if(s1.contains("annivers"))
            rs = stmtAnn.executeQuery("select * from anniversary where username='"+usr+"' and name='"+s2+"'");
            else if(s1.contains("birth"))
            rs = stmtBdy.executeQuery("select * from birthday where username='"+usr+"' and name='"+s2+"'");
            else if(s1.contains("remind"))
            rs = stmtRem.executeQuery("select * from reminder where username='"+usr+"' and name like'"+s2+"'");
            else if(s1.contains("meet"))
            rs = stmtMet.executeQuery("select * from meeting where username='"+usr+"' and name='"+s2+"'");
            else if(s1.contains("note"))
            rs = stmtNot.executeQuery("select * from notes where username='"+usr+"' and name='"+s2+"'");
        } catch (SQLException ex) {
            Logger.getLogger(Text.class.getName()).log(Level.SEVERE, null, ex);
        }
        return rs;
    }
    int findCountplus(int count){
        {
                        count++;
                        date=1;
                        month++;
                        if(month>12)
                        year++;
    }
        return count;
    }
    int findCountminus(int count){
        count--;
        switch(month){
            case 1:case 3:case 5:case 7:case 8:case 10:case 12:
                date=31;break;
            case 2:
                if((year%4==0&&year%100!=0)||year%400==0)date=29;
                else date=28;
                break;
            case 4:case 6:case 9:case 11:
                date=30;
                break;
        }
        month--;
        if(month<1)year--;
        return count;
    }
    void setplus(int i,String s){
        int d1=0,m1=0,y1=0,d2=0,m2=0,y2=0,p=0;
        for(int j=0;j<i;date++,j++){
                    if(mc==0&&date>31){mc=findCountplus(mc);}
                    if(mc==1&&((year%4==0&&year%100!=0)||year%400==0)&&date>29){mc=findCountplus(mc);}
                    if(mc==1&&((year%4!=0&&year%100==0)||year%400!=0)&&date>28){mc=findCountplus(mc);}
                    if(mc==2&&date>31){mc=findCountplus(mc);}
                    if(mc==3&&date>30){mc=findCountplus(mc);}
                    if(mc==4&&date>31){mc=findCountplus(mc);}
                    if(mc==5&&date>30){mc=findCountplus(mc);}
                    if(mc==6&&date>31){mc=findCountplus(mc);}
                    if(mc==7&&date>31){mc=findCountplus(mc);}
                    if(mc==8&&date>30){mc=findCountplus(mc);}
                    if(mc==9&&date>31){mc=findCountplus(mc);}
                    if(mc==10&&date>30){mc=findCountplus(mc);}
                    if(mc==11&&date>31){
                        mc=findCountplus(mc);
                        mc=0;
                    }
                }
        switch(dateSel){
            case 0:d1=d2=date;m1=m2=month;y1=y2=year;break;
            case 1:d1=dateI;m1=monthI;y1=yearI;d2=date;m2=month;y2=year;System.out.println(d2+" "+m2+" "+y2);break;
            case 2:dateI=date;monthI=month;yearI=year;System.out.println(dateI+" "+monthI+" "+yearI);break;
        }
        if(s.contains("birth"))p=0;
        else if(s.contains("anniversar"))p=1;
        else if(s.contains("meet"))p=2;
        else if(s.contains("remind"))p=3;
        else if(s.contains("note"))p=4;

        if(dateSel==0||dateSel==1){

                    Manual m=new Manual(usr, d1, m1, y1, d2, m2, y2,5,p);
                    m.setVisible(true);
                    txtOP.setText("");
                    this.setVisible(false);
    }
             }
    void setminus(int i,String s){
        int d1=0,m1=0,y1=0,d2=0,m2=0,y2=0,p=0;
        for(int j=0;j<i-1;date--,j++){
                    if(mc==0&&date<1){mc=findCountminus(mc);mc=11;}
                    if(mc==1&&((year%4==0&&year%100!=0)||year%400==0)&&date<1){mc=findCountminus(mc);}
                    if(mc==1&&((year%4!=0&&year%100==0)||year%400!=0)&&date<1){mc=findCountminus(mc);}
                    if(mc==2&&date<1){mc=findCountminus(mc);}
                    if(mc==3&&date<1){mc=findCountminus(mc);}
                    if(mc==4&&date<1){mc=findCountminus(mc);}
                    if(mc==5&&date<1){mc=findCountminus(mc);}
                    if(mc==6&&date<1){mc=findCountminus(mc);}
                    if(mc==7&&date<1){mc=findCountminus(mc);}
                    if(mc==8&&date<1){mc=findCountminus(mc);}
                    if(mc==9&&date<1){mc=findCountminus(mc);}
                    if(mc==10&&date<1){mc=findCountminus(mc);}
                    if(mc==11&&date<1){mc=findCountminus(mc);}
                }
        switch(dateSel){
            case 0:d1=d2=date;m1=m2=month;y1=y2=year;break;
            case 1:d1=dateI;m1=monthI;y1=yearI;d2=date;m2=month;y2=year;break;
            case 2:dateI=date;monthI=month;yearI=year;break;
            case 3:d1=date;m1=month;y1=year;d2=dateI;m2=monthI;y2=yearI;break;
        }
        if(s.contains("birth"))p=0;
        else if(s.contains("anniversar"))p=1;
        else if(s.contains("meet"))p=2;
        else if(s.contains("remind"))p=3;
        else if(s.contains("note"))p=4;
        if(dateSel==0||dateSel==1||dateSel==3){
        Manual m=new Manual(usr, d1, m1, y1,d2, m2, y2,5,p);
                    m.setVisible(true);
                    txtOP.setText("");
                    this.setVisible(false);
        }
    }
    void setDate(int i,String s){
        date=dateI;
        month=monthI;
        year=yearI;
        switch(monthI){
            case 1:mc=0;if(i>0)setplus(i,s);else if(i<0) setminus(-i,s);break;
            case 2:mc=1;if(i>0)setplus(i,s);else if(i<0) setminus(-i,s);break;
            case 3:mc=2;if(i>0)setplus(i,s);else if(i<0) setminus(-i,s);break;
            case 4:mc=3;if(i>0)setplus(i,s);else if(i<0) setminus(-i,s);break;
            case 5:mc=4;if(i>0)setplus(i,s);else if(i<0) setminus(-i,s);break;
            case 6:mc=5;if(i>0)setplus(i,s);else if(i<0) setminus(-i,s);break;
            case 7:mc=6;if(i>0)setplus(i,s);else if(i<0) setminus(-i,s);break;
            case 8:mc=7;if(i>0)setplus(i,s);else if(i<0) setminus(-i,s);break;
            case 9:mc=8;if(i>0)setplus(i,s);else if(i<0) setminus(-i,s);break;
            case 10:mc=9;if(i>0)setplus(i,s);else if(i<0) setminus(-i,s);break;
            case 11:mc=10;if(i>0)setplus(i,s);else if(i<0) setminus(-i,s);break;
            case 12:mc=11;if(i>0)setplus(i,s);else if(i<0) setminus(-i,s);break;
        }
    }
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            private String user;
            public void run() {

                new Text(user).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnProcess;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea txtOP;
    private javax.swing.JTextArea txtText;
    // End of variables declaration//GEN-END:variables
    String[] arr;
    ResultSet rs,rsAnn,rsBdy,rsNot,rsMet,rsRem;
    Statement stmtAnn,stmtBdy,stmtRem,stmtNot,stmtMet;
    int i,f=0,mc=0,C,dateSel,fg=0,ff=0,h=0,ko=0,d;
    String usr,text;
    int date,month,year;
    String passDate;
    DateFormat yearf=new SimpleDateFormat("yyyy");
        DateFormat monthf=new SimpleDateFormat("MM");
        DateFormat datef=new SimpleDateFormat("dd");
        DateFormat hourf=new SimpleDateFormat("hh");
        DateFormat minutef=new SimpleDateFormat("mm");
        String almDate,almMonth,almYear,almHr,almMin;
        int alarmDateInt=0,alarmMonthInt=0,alarmYearInt=0,alarmHourInt=0,alarmMinInt=0;
        Date datess=new Date();
        String Year=yearf.format(datess);
        String Month=monthf.format(datess);
        String Date=datef.format(datess);
        String Hour=hourf.format(datess);
        String Minute=minutef.format(datess);
        int dateI=Integer.parseInt(Date);
        int monthI=Integer.parseInt(Month);
        int yearI=Integer.parseInt(Year);
}
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */


